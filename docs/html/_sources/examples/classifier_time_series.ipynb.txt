{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifier time series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Could not find compiled version of c library for handing edf files. If you want edf support, please run setup.py and compile this library\n",
      "Could not import MorletWaveletFilterCpp (C++ version of MorletWaveletFilter): No module named morlet\n",
      "You can still use MorletWaveletFilter\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('/Users/m/PTSA_NEW_GIT/')\n",
    "import numpy as np\n",
    "from numpy.testing import *\n",
    "from ptsa.data.readers import BaseEventReader\n",
    "from ptsa.data.filters.MorletWaveletFilter import MorletWaveletFilter\n",
    "from ptsa.data.readers.TalReader import TalReader\n",
    "from ptsa.data.readers import EEGReader\n",
    "from ptsa.data.filters import MonopolarToBipolarMapper\n",
    "from ptsa.data.filters import DataChopper\n",
    "from ptsa.data.TimeSeriesX import TimeSeriesX\n",
    "from ptsa.data.common import xr\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_auc_score, roc_curve\n",
    "from scipy.stats.mstats import zscore\n",
    "import numpy.testing as npt\n",
    "import cPickle\n",
    "import os\n",
    "from scipy.stats import describe\n",
    "from collections import namedtuple\n",
    "from collections import OrderedDict\n",
    "from time import time\n",
    "\n",
    "# ------------ SETTING UP MATPLOTLIB\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When runing first time set compute_classifier_flag to True. Subsequent run can be executed with flag set to False because classifier will be computed and stored on the hard drive at that time. use_session_chopper_for_wavelets flag will cause that wavelets will be computted for the entire session and then chopped into segments correcponding to events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# -------------- INITIAL SETUP\n",
    "subject = 'R1111M'\n",
    "compute_classifier_flag = True\n",
    "use_session_chopper_for_wavelets = False\n",
    "\n",
    "start_time=0.0\n",
    "end_time=1.6\n",
    "buffer_time=1.0\n",
    "freqs=np.logspace(np.log10(3), np.log10(180), 8)\n",
    "\n",
    "\n",
    "e_path = os.path.join('/Users/m/data/events/RAM_FR1/', subject + '_events.mat')\n",
    "\n",
    "tal_path = os.path.join('/Users/m/data/eeg', subject, 'tal', subject + '_talLocs_database_bipol.mat')\n",
    "\n",
    "ClassifierData = namedtuple('ClassifierData', ['lr_classifier', 'z_score_dict', 'features', 'recalls'])\n",
    "ZScoreParams = namedtuple('ZScoreParams', ['mean', 'std'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_monopolar_and_bipolar_electrodes():\n",
    "    tal_reader = TalReader(filename=tal_path)\n",
    "    monopolar_channels = tal_reader.get_monopolar_channels()\n",
    "    bipolar_pairs = tal_reader.get_bipolar_pairs()\n",
    "    return monopolar_channels, bipolar_pairs\n",
    "\n",
    "def get_events():\n",
    "    # ---------------- NEW STYLE PTSA -------------------\n",
    "    base_e_reader = BaseEventReader(filename=e_path, eliminate_events_with_no_eeg=True)\n",
    "\n",
    "    base_events = base_e_reader.read()\n",
    "\n",
    "    base_events = base_events[base_events.type == 'WORD']\n",
    "    return base_events\n",
    "\n",
    "def get_bp_data(evs):\n",
    "    eeg_reader = EEGReader(events=evs, channels=monopolar_channels,\n",
    "                           start_time=start_time, end_time=end_time, buffer_time=buffer_time)\n",
    "\n",
    "    base_eegs = eeg_reader.read()\n",
    "\n",
    "    m2b = MonopolarToBipolarMapper(time_series=base_eegs, bipolar_pairs=bipolar_pairs)\n",
    "    bp_eegs = m2b.filter()\n",
    "    return bp_eegs\n",
    "\n",
    "def compute_wavelets(evs):\n",
    "    bp_eegs = get_bp_data(evs)\n",
    "    wf = MorletWaveletFilter(time_series=bp_eegs,\n",
    "                             freqs=freqs,\n",
    "                             output='power',\n",
    "                             frequency_dim_pos=0,\n",
    "                             verbose=True\n",
    "                             )\n",
    "    pow_wavelet, phase_wavelet = wf.filter()\n",
    "    pow_wavelet = pow_wavelet.remove_buffer(duration=buffer_time)\n",
    "    return pow_wavelet\n",
    "\n",
    "def chop_time_series(time_series, start_offsets):\n",
    "    dc = DataChopper(start_offsets=start_offsets, session_data=time_series, start_time=start_time, end_time=end_time)\n",
    "    chopped_time_series = dc.filter()\n",
    "    return chopped_time_series\n",
    "\n",
    "\n",
    "def compute_continuous_wavelets(dataroot):\n",
    "    session_reader = EEGReader(session_dataroot=dataroot, channels=monopolar_channels)\n",
    "    session_eegs = session_reader.read()\n",
    "\n",
    "    m2b = MonopolarToBipolarMapper(time_series=session_eegs, bipolar_pairs=bipolar_pairs)\n",
    "    session_bp_eegs = m2b.filter()\n",
    "\n",
    "    wf = MorletWaveletFilter(time_series=session_bp_eegs,\n",
    "                             freqs=np.logspace(np.log10(3), np.log10(180), 8),\n",
    "                             output='power',\n",
    "                             frequency_dim_pos=0,\n",
    "                             verbose=True\n",
    "                             )\n",
    "\n",
    "    pow_wavelet_session, phase_wavelet_session = wf.filter()\n",
    "    return pow_wavelet_session\n",
    "\n",
    "def compute_event_wavelets_from_session_wavelets(evs):\n",
    "    s = time()\n",
    "    session = evs[0].session\n",
    "    dataroot = base_events[base_events.session == session][0].eegfile\n",
    "\n",
    "    session_wavelet = compute_continuous_wavelets(dataroot=dataroot)\n",
    "\n",
    "    session_wavelet_chopped = chop_time_series(time_series=session_wavelet, start_offsets=evs.eegoffset)\n",
    "    session_wavelet_chopped = session_wavelet_chopped.rename({'start_offsets': 'events'})\n",
    "\n",
    "    return session_wavelet_chopped\n",
    "\n",
    "def compute_zscored_features(log_pow_wavelet):\n",
    "    transposed_log_pow_wavelet = log_pow_wavelet.transpose('events', \"bipolar_pairs\", \"frequency\", \"time\")\n",
    "    mean_powers_nd = np.nanmean(transposed_log_pow_wavelet.data, axis=-1)\n",
    "    mean_powers_rs = mean_powers_nd.reshape(mean_powers_nd.shape[0], -1)\n",
    "    m = np.mean(mean_powers_rs, axis=0)\n",
    "    s = np.std(mean_powers_rs, axis=0, ddof=1)\n",
    "    z_score_mean_powers = (mean_powers_rs - m) / s\n",
    "    \n",
    "    return z_score_mean_powers, m, s\n",
    "\n",
    "def compute_features_recalls_normalization_params(session_list, use_session_chopper_for_wavelets=False):\n",
    "    z_score_params_dict = OrderedDict()\n",
    "\n",
    "    sessions_mask = np.zeros(base_events.shape[0], dtype=np.bool)\n",
    "    for session in session_list:\n",
    "        sessions_mask = sessions_mask | (base_events.session == session)\n",
    "\n",
    "    sessions_evs = base_events[sessions_mask]\n",
    "\n",
    "\n",
    "    if use_session_chopper_for_wavelets:\n",
    "        pow_wavelet_list = []\n",
    "        for session in session_list:\n",
    "            session_mask = sessions_evs.session == session\n",
    "            single_session_evs = sessions_evs[session_mask]\n",
    "            pow_wavelet = compute_event_wavelets_from_session_wavelets(single_session_evs)\n",
    "            pow_wavelet_list.append(pow_wavelet)\n",
    "\n",
    "        pow_wavelet = xr.concat(pow_wavelet_list,dim='events')\n",
    "\n",
    "    else:\n",
    "        pow_wavelet = compute_wavelets(sessions_evs)\n",
    "        # pow_wavelet = pow_wavelet.remove_buffer(duration=1.0)\n",
    "        \n",
    "    # -------------- TAKING LOG10    \n",
    "    np.log10(pow_wavelet.data, out=pow_wavelet.data);\n",
    "\n",
    "    features_list = []\n",
    "    recalls_list = []\n",
    "    for session in session_list:\n",
    "        session_mask = sessions_evs.session == session\n",
    "        single_session_evs = sessions_evs[session_mask]\n",
    "        log_session_wavelet = pow_wavelet[:, :, session_mask, :]\n",
    "\n",
    "#         mean, std = compute_zscoring_params(log_pow_wavelet=log_session_wavelet)\n",
    "#         # session_zscore_mean_powers has two axes - 1 ->events , 2->bp x freq\n",
    "#         session_zscore_mean_powers = compute_features_using_zscoring_params(log_session_wavelet, mean, std)\n",
    "        \n",
    "        session_zscore_mean_powers, mean, std = compute_zscored_features(log_pow_wavelet=log_session_wavelet)\n",
    "        \n",
    "        \n",
    "        \n",
    "        recalls_list.append(single_session_evs.recalled.astype(np.int))\n",
    "        features_list.append(session_zscore_mean_powers)\n",
    "\n",
    "        z_score_params_dict[session] = ZScoreParams(mean=mean, std=std)  # packaging int namedtuple for saving\n",
    "    features = np.concatenate(features_list, axis=0)\n",
    "    recalls = np.concatenate(recalls_list, axis=0)\n",
    "\n",
    "    return features, recalls, z_score_params_dict\n",
    "\n",
    "def compute_features_using_zscoring_params(pow_wavelet, mean, std):\n",
    "    transposed_log_pow_wavelet = pow_wavelet.transpose('events', \"bipolar_pairs\", \"frequency\", \"time\")\n",
    "\n",
    "    mean_powers_nd = np.nanmean(transposed_log_pow_wavelet.data, axis=-1)\n",
    "\n",
    "    mean_powers_rs = mean_powers_nd.reshape(mean_powers_nd.shape[0], -1)\n",
    "    mean_powers_rs.shape\n",
    "\n",
    "    z_score_mean_powers = (mean_powers_rs - mean) / std\n",
    "\n",
    "    return z_score_mean_powers\n",
    "\n",
    "def compute_classifier(session_list, use_session_chopper_for_wavelets=False):\n",
    "    features, recalls, z_score_params_dict = compute_features_recalls_normalization_params(\n",
    "        session_list=session_list,\n",
    "        use_session_chopper_for_wavelets=use_session_chopper_for_wavelets\n",
    "    )\n",
    "\n",
    "    lr_classifier = train_classifier(features, recalls)\n",
    "\n",
    "    recall_prob_array = lr_classifier.predict_proba(features)[:, 1]\n",
    "    auc = roc_auc_score(recalls, recall_prob_array)\n",
    "    print 'auc=', auc\n",
    "\n",
    "    classifier_data = ClassifierData(lr_classifier=lr_classifier, z_score_dict=z_score_params_dict, features=features,\n",
    "                                     recalls=recalls)\n",
    "    return classifier_data\n",
    "\n",
    "def train_classifier(features, recalls):\n",
    "    lr_classifier = LogisticRegression(C=7.2e-4, penalty='l2', class_weight='auto', solver='liblinear')\n",
    "    lr_classifier.fit(features, recalls)\n",
    "    return lr_classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function will tak as an input the following:\n",
    "1. wavelets computed for the entire session\n",
    "2. ClassifierData tuple - containing trained classifier, mean and std dev for z scoring\n",
    "3. start_time (in seconds) - determines the time location of the epoch at which we being computting probs tgime series\n",
    "4. end_time (in seconds) - determines the last epoch of thr probs time series\n",
    "5. resolution - separation of the time points (in seconds) at which we calculate recall probabilities\n",
    "5. slice_size - determines  the number of choping operations DataChopper performs  - since Data Chopper returns eeg time series using smaller slice_size has less strain on memory. in principle call Data Chopper only once but if the number of chops is large we might run out of memory...\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_probs_ts(pow_wavelet_session, classifier_data, start_time=10.0, end_time=20.0, slice_size=10,\n",
    "                     resolution=0.1, session_num=0):\n",
    "    lr_classifier = classifier_data.lr_classifier\n",
    "    z_score_dict = classifier_data.z_score_dict\n",
    "\n",
    "    mean = z_score_dict[session_num].mean\n",
    "    std = z_score_dict[session_num].std\n",
    "\n",
    "    # resolution is in seconds\n",
    "    samplerate = float(pow_wavelet_session['samplerate'])\n",
    "\n",
    "    number_of_samples_in_resolution = int(round(resolution * samplerate))\n",
    "\n",
    "    total_number_of_items = int(round((end_time - start_time) / resolution))\n",
    "\n",
    "    number_of_compute_iterations = total_number_of_items / slice_size\n",
    "\n",
    "    probs_list = []\n",
    "\n",
    "    for n in xrange(number_of_compute_iterations):\n",
    "        st = start_time + n * slice_size * resolution\n",
    "        initial_offset = int(round(st * samplerate))\n",
    "        start_offsets = initial_offset + np.arange(slice_size) * number_of_samples_in_resolution\n",
    "\n",
    "        pow_wavelet_chopped = chop_time_series(time_series=pow_wavelet_session, start_offsets=start_offsets)\n",
    "        pow_wavelet_chopped = pow_wavelet_chopped.rename({'start_offsets': 'events'})\n",
    "        np.log10(pow_wavelet_chopped.data, out=pow_wavelet_chopped.data)\n",
    "\n",
    "        features = compute_features_using_zscoring_params(pow_wavelet_chopped, mean, std)\n",
    "        probs = lr_classifier.predict_proba(features)[:, 1]\n",
    "\n",
    "        probs_list.append(probs)\n",
    "\n",
    "    probs_array = np.hstack(probs_list)\n",
    "    time_axis = start_time + np.arange(probs_array.shape[0]) * resolution\n",
    "    return time_axis, probs_array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Begining of the computational pipeline that computes classifiers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "base_events = get_events()\n",
    "monopolar_channels, bipolar_pairs = get_monopolar_and_bipolar_electrodes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total time wavelet loop:  139.483090878\n",
      "total time wavelet loop:  133.395081997\n",
      "auc= 0.884154414327\n",
      "total time wavelet loop: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/m/miniconda/envs/ram/lib/python2.7/site-packages/sklearn/utils/class_weight.py:62: DeprecationWarning: The class_weight='auto' heuristic is deprecated in 0.17 in favor of a new heuristic class_weight='balanced'. 'auto' will be removed in 0.19\n",
      "  \" 0.19\", DeprecationWarning)\n",
      "/Users/m/miniconda/envs/ram/lib/python2.7/site-packages/sklearn/utils/class_weight.py:62: DeprecationWarning: The class_weight='auto' heuristic is deprecated in 0.17 in favor of a new heuristic class_weight='balanced'. 'auto' will be removed in 0.19\n",
      "  \" 0.19\", DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 135.17332387\n",
      "auc= 0.905418180009\n",
      "validation auc= 0.698392954873\n"
     ]
    }
   ],
   "source": [
    "if compute_classifier_flag:\n",
    "    training_sesssions = [0, 1]\n",
    "    use_session_chopper = True\n",
    "\n",
    "    classifier_data = compute_classifier(\n",
    "        session_list=training_sesssions,\n",
    "        use_session_chopper_for_wavelets=use_session_chopper_for_wavelets\n",
    "    )\n",
    "    # save the classifier\n",
    "    with open('new_classifier_data_' + subject + '.pkl', 'wb') as fid:\n",
    "        cPickle.dump(classifier_data, fid)\n",
    "\n",
    "    training_classifier = classifier_data.lr_classifier\n",
    "\n",
    "    validation_sesssions = [2]\n",
    "    validation_classifier_data = \\\n",
    "    compute_classifier(\n",
    "        session_list=validation_sesssions,\n",
    "        use_session_chopper_for_wavelets=use_session_chopper_for_wavelets\n",
    "    )\n",
    "\n",
    "    validation_features = validation_classifier_data.features\n",
    "    validation_recalls = validation_classifier_data.recalls\n",
    "\n",
    "    validation_recall_prob_array = training_classifier.predict_proba(validation_features)[:, 1]\n",
    "    auc = roc_auc_score(validation_recalls, validation_recall_prob_array)\n",
    "    print 'validation auc=', auc\n",
    "\n",
    "# we read classifier from the disk\n",
    "\n",
    "with open('new_classifier_data_' + subject + '.pkl', 'rb') as fid:\n",
    "    classifier_data = cPickle.load(fid)\n",
    "\n",
    "lr_classifier = classifier_data.lr_classifier\n",
    "z_score_dict = classifier_data.z_score_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we will compute classifier time series. We begin by computing continuous wavelets for the session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total time wavelet loop:  136.65112114\n"
     ]
    }
   ],
   "source": [
    "session = 0\n",
    "dataroot = base_events[base_events.session == session][0].eegfile\n",
    "\n",
    "pow_wavelet_session = compute_continuous_wavelets(dataroot=dataroot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_axis, classifier_array = compute_probs_ts(pow_wavelet_session,\n",
    "                                          classifier_data,\n",
    "                                          start_time=50.0,\n",
    "                                          end_time=70.0,\n",
    "                                          slice_size=10,\n",
    "                                          resolution=0.1\n",
    "                                          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x114fbac90>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nDMPIQ/4/Asv82qcuiwsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111677410>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(time_axis, classifier_array)\n",
    "# plt.savefig('classifier_time_series.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "if use_session_chopper_for_wavelets:\n",
    "    label='chopped'\n",
    "else:\n",
    "    label='non_chopped'\n",
    "    \n",
    "with open('classifier_time_series_'+label+'_' + subject + '.pkl', 'wb') as fid:\n",
    "    cPickle.dump([time_axis,classifier_array], fid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('classifier_time_series_'+'chopped'+'_' + subject + '.pkl', 'rb') as fid:\n",
    "    time_axis_chopped,classifier_array_chopped = cPickle.load(fid)\n",
    "    \n",
    "with open('classifier_time_series_'+'non_chopped'+'_' + subject + '.pkl', 'rb') as fid:\n",
    "    time_axis_non_chopped,classifier_array_non_chopped = cPickle.load(fid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x111518610>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111518090>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(time_axis_non_chopped, classifier_array_non_chopped)\n",
    "plt.plot(time_axis_chopped, classifier_array_chopped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# long time interval classifier time series\n",
    "time_axis_long, classifier_array_long = compute_probs_ts(pow_wavelet_session,\n",
    "                                          classifier_data,\n",
    "                                          start_time=50.0,\n",
    "                                          end_time=1250.0,\n",
    "                                          slice_size=10,\n",
    "                                          resolution=0.1\n",
    "                                          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11567d350>]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11487de50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "s = slice(2000,3000,1)\n",
    "plt.plot(time_axis_long[s], classifier_array_long[s])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "time_axis_chopped=time_axis\n",
    "classifier_array_chopped = classifier_array\n",
    "auc_v_chopped=0.698392954873\n",
    "auc_t_chopped = 0.884154414327"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x111535690>]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111535b10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(time_axis, classifier_array)\n",
    "plt.plot(time_axis_chopped, classifier_array_chopped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}

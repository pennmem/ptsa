{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from ptsa.data.readers import BaseEventReader\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "rhino_root= '/Volumes/rhino_root'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. pyFR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "events = BaseEventReader(filename=rhino_root+'/data/events/pyFR/BW001_events.mat').read()\n",
    "words  = events[events.type=='WORD']\n",
    "serialpositions = np.unique(words.serialpos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "prec_by_serialpos = [words[words.serialpos==s].recalled.mean() for s in serialpositions]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x11f8da450>,\n  <matplotlib.axis.XTick at 0x11f85be90>,\n  <matplotlib.axis.XTick at 0x11f9929d0>,\n  <matplotlib.axis.XTick at 0x11fa01090>,\n  <matplotlib.axis.XTick at 0x11fa01790>,\n  <matplotlib.axis.XTick at 0x11fa01e90>,\n  <matplotlib.axis.XTick at 0x11fa0d5d0>,\n  <matplotlib.axis.XTick at 0x11fa0dcd0>,\n  <matplotlib.axis.XTick at 0x11fa18410>],\n <a list of 9 Text xticklabel objects>)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11f6536d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(serialpositions, prec_by_serialpos,width=.5,)\n",
    "plt.xlim([serialpositions.min()-0.5,serialpositions.max()+0.5])\n",
    "plt.title('P (recall | serialpos )')\n",
    "plt.ylabel('P(recall)')\n",
    "plt.xlabel('Serial Position')\n",
    "plt.xticks(range(2,20,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. RAM FR1\n",
    "\n",
    "The RAM data is organized via a Json index, which can be queried via the JsonIndexReader class. \n",
    "In theory, this saves you from having to know where the actual event files are located\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ptsa.data.readers.IndexReader import JsonIndexReader\n",
    "jr = JsonIndexReader(rhino_root+'/protocols/r1.json')\n",
    "events = np.concatenate([BaseEventReader(filename=f).read() for f in \n",
    "                         jr.aggregate_values('task_events',subject='R1111M',experiment='FR1')]\n",
    "                        )\n",
    "# Because np.concatenate turns record arrays into structured arrays, and attribute-like field access is nice \n",
    "events = events.view(np.recarray)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The remainder is the same as before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "words = events[events.type=='WORD']\n",
    "serialpositions = np.unique(words.serialpos)\n",
    "prec_by_serialpos  = [words[words.serialpos==s].recalled.mean() for s in serialpositions]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x120416ad0>,\n  <matplotlib.axis.XTick at 0x120e541d0>,\n  <matplotlib.axis.XTick at 0x11f300bd0>,\n  <matplotlib.axis.XTick at 0x120ea32d0>,\n  <matplotlib.axis.XTick at 0x120ea39d0>,\n  <matplotlib.axis.XTick at 0x120eae110>],\n <a list of 6 Text xticklabel objects>)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nSWoZCpKklqEgSWoZCpKklqEgSWoZCpKklqEgSWoZCpKklqEgSWoZCpKklqEgSWoZCpKklqEgSWoZ\nCpKkVqehkGRlki1JtiY5cTfrH5rk/ya5KclfdVmLJGlynT2jOckC4GTgKcA2YGOS9VX1w75uvwBe\nBTyrqzokSYPr8khhBbC1qi6vqpuBdcCx/R2q6uqq2gjc0mEdkqQBdRkKi4Gr+pa3NW1TlmR1kk1J\nNo2Ojk5LcZKk25oTE81VdWpVLa+q5SMjI8MuR5LmrS5DYTuwpG95/6ZNkjRLdRkKG4FlSQ5KshBY\nBazv8PMkSXuos7OPqmpHkhOAc4EFwGlVtTnJmmb92iT3AzYB9wR2JnkNcEhV/aqruiRJ4+ssFACq\nagOwYUzb2r7XP6c3rCRJmgXmxESzJGlmGAqSpJahIElqGQqSpJahIElqGQqSpJahIElqGQqSpJah\nIElqGQqSpJahIElqGQqSpJahIElqGQqSpJahIElqGQqSpJahIElqGQqSpJahIElqdRoKSVYm2ZJk\na5ITd7M+Sd7brL8kyaO6rEeSNLHOQiHJAuBk4GjgEOD4JIeM6XY0sKz5WQ18oKt6JEmT6/JIYQWw\ntaour6qbgXXAsWP6HAt8tHq+Deyb5P4d1iRJmkCqqpsNJ8cBK6vq5c3yC4EjquqEvj7nAO+oqm82\ny18BXldVm8ZsazW9IwmAhwBbbkdJi4Brbsf75gr3b26bz/s3n/cN5s7+HVhVI5N12msmKtlTVXUq\ncOqebCPJpqpaPk0lzTru39w2n/dvPu8bzL/963L4aDuwpG95/6Ztqn0kSTOky1DYCCxLclCShcAq\nYP2YPuuBFzVnIT0G+GVV/azDmiRJE+hs+KiqdiQ5ATgXWACcVlWbk6xp1q8FNgBPA7YCvwFe2lU9\n7OHw0xzg/s1t83n/5vO+wTzbv84mmiVJc49XNEuSWoaCJKk170MhyWlJrk5y6bBrmW5J7prkO0m+\nn2Rzkr8Zdk3TLckVSX6Q5OIkmyZ/x9yR5CHNfu36+VWS1wy7rumU5NVJLm3++5zz+7a775Mkz2n2\nb2eSOX9q6rwPBeB0YOWwi+jITcCTquqRwGHAyuYsrvnmiVV12Hw6FxygqrY0+3UYcDi9ky3OHnJZ\n0ybJw4FX0Lu7wSOBY5IcPNyq9tjp3Pb75FLgPwBfn/FqOjDvQ6Gqvg78Yth1dKG5PcgNzeKdmx/P\nHJibngz8S1VdOexCptHDgAur6jdVtQM4n96X55y1u++Tqrqsqm7PXRZmpXkfCvNdkgVJLgauBs6r\nqguHXdM0K+DLSS5qbncyX60CPjnsIqbZpcATktwnyd3onX6+ZJL3aMjmxG0uNL6quhU4LMm+wNlJ\nHl5V82n+5PFVtT3JfsB5SX7U/LU2bzQXdz4TeP2wa5lOVXVZkncCXwJuBC4Gbh1uVZqMRwrzRFVd\nD/wT82z+pKq2N/+8mt54+4rhVtSJo4HvVtW/DruQ6VZVH66qw6vqj4HrgB8PuyZNzFCYw5KMNEcI\nJNkbeArwo+FWNX2S3D3JPrteA39Cb0hivjme+Td0BEBzhEeSA+jNJ3xiuBVpMvN++CjJJ4GjgEVJ\ntgFvqqoPD7eqaXN/4IzmgUZ3Aj5dVecMuabpdF96Q2LQ+2/1E1X1xeGWNL2asHsK8GfDrqUjZya5\nD3AL8F+aI9o5a3ffJ/Qmnt8HjACfT3JxVT11eFXuGW9zIUlqOXwkSWoZCpKklqEgSWoZCpKklqEg\nSWoZCprzkvx1c5fKS5q7jR4xxfevSfKiSfq8OclfjdO+vfncS5M883bUvzzJe5vXRyX5o6nUJk2n\neX+dgua3JI8FjgEeVVU3JVkELJzC+/dqHg27J/6hqt6d5GHAN5LsV1U7B31zVW0Cdt0W/CjgBuCC\nZt2e1iZNiUcKmuvuD1xTVTcBVNU1VfVTgCSHJzm/uZneuUnu37R/LclJzfMZXt1/FJDkFUk2Ns+o\nOLO5kdtAquoyYAe9C5uWJvlqc/TyleaK3l333r+02f7Xm7ajkpyTZCmwBviL5sjjCWNqOyzJt5tt\nnp3kXn37887m2Ro/TvKE6fjF6o7JUNBc9yVgSfNleEqSIwGS3JneVabHVdXhwGnAW/vet7CqllfV\n343Z3llV9ejmGRWXAS8btJBm2GonMNp89hlVdSjwceC9Tbc3Ak9ttv97Q01VdQWwlt6Rx2FV9Y0x\nH/FR4HXNNn9A72raXfaqqhXAa8a0S1Pi8JHmtKq6IcnhwBOAJwKfSnIiveGYh9O7syrAAuBnfW/9\n1DibfHiSvwX2Be4BnDtAGX+R5AXAr4HnVlU1w1q7nh3wv4H/2bz+FnB6kk8DZw24myT5A2Dfqjq/\naToD+D99XXZt6yJg6aDblcYyFDTnNbcP/xrwtSQ/AF5M78txc1U9dpy33ThO++nAs6rq+0leQm+M\nfzL/UFXvHrDWNc0RxdOBi5pAmw43Nf+8Ff+/1h5w+EhzWnrPOV7W13QYcCWwBRhp/mInyZ2T/OEA\nm9wH+Fkz/PT8PSjtAnoPzqHZzjeaOh5UVRdW1RvpDTONfejMr5safk9V/RK4rm++4IX0nmQmTSv/\notBcdw/gfc0txHcAW4HVVXVzkuOA9zZDL3sBJwGbJ9neG4AL6X1hX8huvqAH9ErgI0le22zrpU37\nu5oQC/AV4PvAkX3v+xzwj0mObbbR78XA2mby+/K+bUrTxrukSpJaDh9JklqGgiSpZShIklqGgiSp\nZShIklqGgiSpZShIklr/BmIR68KI6fKoAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x120473a50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(serialpositions, prec_by_serialpos,width=.5,)\n",
    "plt.xlim([serialpositions.min()-0.5,serialpositions.max()+0.5])\n",
    "plt.title('P (recall | serialpos )')\n",
    "plt.ylabel('P(recall)')\n",
    "plt.xlabel('Serial Position')\n",
    "plt.xticks(serialpositions[::2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. LTPFR2\n",
    "\n",
    "For purely behavioral analyses, it can be convenient to work with a pandas DataFrame, rather than a raw record array. \n",
    "\n",
    "This example is simple enough that there isn't much difference, but with more complex groupings the advantages accrue rapidly. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "events = BaseEventReader(filename=rhino_root+'/data/eeg/scalp/ltp/ltpFR2/behavioral/events/events_all_LTP093.mat',common_root='data').read()\n",
    "events = pd.DataFrame.from_records([e for e in events],columns = events.dtype.names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameter `common_root` is because the scalp data doesn't live in `/data/events`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "prec_by_serialpos = events.loc[events.type=='WORD',['recalled','serialpos']].groupby('serialpos').mean()\n",
    "print(type(prec_by_serialpos))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A small change in the sytax will return a Series, rather than a DataFrame, though the underlying array is the same in both cases:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n"
     ]
    }
   ],
   "source": [
    "prec_series = events.loc[events.type=='WORD'].groupby('serialpos').recalled.mean()\n",
    "print(type(prec_series))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DataFrames have a their own plotting interface, which fills in a bunch of arguments to pyplot functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1213cc290>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121a8e910>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prec_by_serialpos.plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "...but they don't always turn out the way you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
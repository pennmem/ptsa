{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pyFR Demo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from ptsa.data.readers import BaseEventReader\n",
    "from ptsa.data.readers.TalReader import TalReader\n",
    "from ptsa.data.readers import EEGReader"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To read behavioral events we need to first localize the directory where the events are stored. If you are running the code on rhino then pyFR events are stored in /data/events/pyFR. Since I mounted rhino filesystem remotely I have to prepend /Volumes/rhino_root to this path - in my case /Volumes/rhino_root specifies the folder where I mounted rhino file system. Once you know the location you simply ocnstruct the path to the event file by using subject code (here TJ011). \n",
    "\n",
    "BaseEventReader takes a path to the event file and optional flag *eliminate_events_with_no_eegs* that lets you pre-filter events to include only those that have eeg data associated with them.\n",
    "\n",
    "Finally, after you create BaseEventReader object you call its *read* function that returns a Numpy recarray with behavioral events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ev_path = '/Volumes/rhino_root/data/events/pyFR/TJ011_events.mat'\n",
    "base_e_reader = BaseEventReader(filename=ev_path, eliminate_events_with_no_eeg=True)\n",
    "base_events = base_e_reader.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_events = base_events[base_events.type == 'WORD']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To examine the conten of the event recarray we can print its columns one by one and do some filtering that matches our criteria. For example let's print all the columns of the recarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype((numpy.record, [('subject', 'S256'), ('session', '<i8'), ('list', '<i8'), ('serialpos', '<i8'), ('type', 'S256'), ('item', 'S256'), ('itemno', '<i8'), ('recalled', '<i8'), ('mstime', '<f8'), ('msoffset', '<i8'), ('rectime', '<i8'), ('intrusion', '<i8'), ('eegfile', 'S256'), ('eegoffset', '<i8')]))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_events.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above you can see a summary of the fields that are available in the record array. Let's print first 2 events to see actual content of the record array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rec.array([ ('TJ011', 0, 1, 1, 'WORD', 'CUBE', 72, 0, 1270575931057.0, 1, -999, -999, '/Volumes/rhino_root/data/eeg/TJ011/eeg.noreref/TJ011_06Apr10_1319', 235074),\n",
       " ('TJ011', 0, 1, 2, 'WORD', 'JUDGE', 142, 0, 1270575933544.0, 1, -999, -999, '/Volumes/rhino_root/data/eeg/TJ011/eeg.noreref/TJ011_06Apr10_1319', 235572)], \n",
       "          dtype=[('subject', 'S256'), ('session', '<i8'), ('list', '<i8'), ('serialpos', '<i8'), ('type', 'S256'), ('item', 'S256'), ('itemno', '<i8'), ('recalled', '<i8'), ('mstime', '<f8'), ('msoffset', '<i8'), ('rectime', '<i8'), ('intrusion', '<i8'), ('eegfile', 'S256'), ('eegoffset', '<i8')])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_events[:2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can tell from the output above each event contains subject, session number, list number, serial position number, type of the event (here all events are WORD events because we have performed filtering base_events = base_events[base_events.type == 'WORD']) etc.... Let's see what words were displayed on the screen:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['CUBE', 'JUDGE', 'BRUSH', 'HILL', 'STEM', 'HOUSE', 'HORSE', 'ROCK',\n",
       "       'HOOF', 'GEESE', 'APE', 'YARD', 'TANK', 'HOOK', 'CROW', 'PIT',\n",
       "       'PLATE', 'GIRL', 'DUCK', 'BOMB'], \n",
       "      dtype='|S256')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_events[\"item\"][:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "base_events[\"item\"] is an array of all the words displayed during entire experiment. Since I wanted to display only first 20 words I used slicing operation base_events[\"item\"][:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that if we want to display e.g. serialpos column we can use the following syntax:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  1,  2,\n",
       "        3,  4,  5])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_events.serialpos[:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or we could use another equivalent syntax:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  1,  2,\n",
       "        3,  4,  5])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_events[\"serialpos\"][:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However when we try to use the first syntax for *item* we will get into trouble:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'builtin_function_or_method' object has no attribute '__getitem__'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-22-4b9f7b78e61d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbase_events\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: 'builtin_function_or_method' object has no attribute '__getitem__'"
     ]
    }
   ],
   "source": [
    "base_events.item[:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This happens because *item* is built-in name of of the funuction belonging to recarray and by typing  *base_events.item* you are referring to the function not the column of the array. Thus to access words on the screen via *item*  you have to use base_events[\"item\"][:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
